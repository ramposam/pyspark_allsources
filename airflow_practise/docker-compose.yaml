version: "3.7"
# Uncomment anyone either spark or airflow ,both making up last port overrides all prior ports even though you make ports different

# Common sections extracted out
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.0-python3.8}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@db-inst-postgres.cabrrax308iv.ap-south-1.rds.amazonaws.com:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://postgres:postgres@db-inst-postgres.cabrrax308iv.ap-south-1.rds.amazonaws.com:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    # Change log level when needed
    AIRFLOW__LOGGING__LOGGING_LEVEL: 'INFO'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
  depends_on:
    - redis
  networks:
      - default_net



services:
#  spark-master:
#    image: bde2020/spark-master:3.0.2-hadoop3.2
#    container_name: spark-master
#    ports:
#      - "8090:8080"
#      - "7077:7077"
#    environment:
#      - INIT_DAEMON_STEP=setup_spark
#  spark-worker-1:
#    image: bde2020/spark-worker:3.0.2-hadoop3.2
#    container_name: spark-worker-1
#    depends_on:
#      - spark-master
#    ports:
#      - "8091:8081"
#    environment:
#      - "SPARK_MASTER=spark://spark-master:7077"
     

  redis:
    image: redis:6.0.10
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
        - default_net



  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8085:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8085/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    environment:
      <<: *airflow-common-env
      # It is sufficient to run db upgrade and create admin user only from webserver service
      _AIRFLOW_WWW_USER_PASSWORD: 'yourAdminPass'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'


  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always
    
networks:
    default_net:
      attachable: true